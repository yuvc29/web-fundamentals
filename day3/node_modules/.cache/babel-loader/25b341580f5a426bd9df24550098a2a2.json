{"ast":null,"code":"var allowedVariants = ['normal', 'small-caps'];\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\n\nexport function getFontShorthand(element) {\n  if (!element) {\n    return '';\n  }\n  var style = window.getComputedStyle(element);\n  if (style.font) {\n    return style.font;\n  }\n  var isFontDefined = style['font-family'] !== '';\n  if (!isFontDefined) {\n    return '';\n  }\n  var fontVariant = allowedVariants.includes(style['font-variant']) ? style['font-variant'] : 'normal';\n  return \"\".concat(style['font-style'], \" \").concat(fontVariant, \" \").concat(style['font-weight'], \" \").concat(style['font-size'], \" / \").concat(style['line-height'], \" \").concat(style['font-family']);\n}\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {string} text Text to measure\n * @param {string} font Font to use when measuring the text\n */\n\nexport function measureText(text, font) {\n  var canvas = measureText.canvas || (measureText.canvas = document.createElement('canvas'));\n  var context = canvas.getContext('2d'); // Context type not supported\n\n  if (!context) {\n    return null;\n  }\n  context.font = font;\n  var _context$measureText = context.measureText(text),\n    width = _context$measureText.width;\n  return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\n\nexport function updateInputWidth(element) {\n  if (typeof window === 'undefined' || !element) {\n    return null;\n  }\n  var font = getFontShorthand(element);\n  var text = element.value || element.placeholder;\n  var width = measureText(text, font);\n  if (width === null) {\n    return null;\n  }\n  element.style.width = \"\".concat(width, \"px\");\n  return width;\n}\nexport default updateInputWidth;","map":{"version":3,"names":["allowedVariants","getFontShorthand","element","style","window","getComputedStyle","font","isFontDefined","fontVariant","includes","concat","measureText","text","canvas","document","createElement","context","getContext","_context$measureText","width","Math","ceil","updateInputWidth","value","placeholder"],"sources":["/home/yuvrajchandrawanshi/react/day3/node_modules/update-input-width/dist/esm/index.js"],"sourcesContent":["var allowedVariants = ['normal', 'small-caps'];\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\n\nexport function getFontShorthand(element) {\n  if (!element) {\n    return '';\n  }\n\n  var style = window.getComputedStyle(element);\n\n  if (style.font) {\n    return style.font;\n  }\n\n  var isFontDefined = style['font-family'] !== '';\n\n  if (!isFontDefined) {\n    return '';\n  }\n\n  var fontVariant = allowedVariants.includes(style['font-variant']) ? style['font-variant'] : 'normal';\n  return \"\".concat(style['font-style'], \" \").concat(fontVariant, \" \").concat(style['font-weight'], \" \").concat(style['font-size'], \" / \").concat(style['line-height'], \" \").concat(style['font-family']);\n}\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {string} text Text to measure\n * @param {string} font Font to use when measuring the text\n */\n\nexport function measureText(text, font) {\n  var canvas = measureText.canvas || (measureText.canvas = document.createElement('canvas'));\n  var context = canvas.getContext('2d'); // Context type not supported\n\n  if (!context) {\n    return null;\n  }\n\n  context.font = font;\n\n  var _context$measureText = context.measureText(text),\n      width = _context$measureText.width;\n\n  return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\n\nexport function updateInputWidth(element) {\n  if (typeof window === 'undefined' || !element) {\n    return null;\n  }\n\n  var font = getFontShorthand(element);\n  var text = element.value || element.placeholder;\n  var width = measureText(text, font);\n\n  if (width === null) {\n    return null;\n  }\n\n  element.style.width = \"\".concat(width, \"px\");\n  return width;\n}\nexport default updateInputWidth;"],"mappings":"AAAA,IAAIA,eAAe,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC;AAC9C;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAgB,CAACC,OAAO,EAAE;EACxC,IAAI,CAACA,OAAO,EAAE;IACZ,OAAO,EAAE;EACX;EAEA,IAAIC,KAAK,GAAGC,MAAM,CAACC,gBAAgB,CAACH,OAAO,CAAC;EAE5C,IAAIC,KAAK,CAACG,IAAI,EAAE;IACd,OAAOH,KAAK,CAACG,IAAI;EACnB;EAEA,IAAIC,aAAa,GAAGJ,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE;EAE/C,IAAI,CAACI,aAAa,EAAE;IAClB,OAAO,EAAE;EACX;EAEA,IAAIC,WAAW,GAAGR,eAAe,CAACS,QAAQ,CAACN,KAAK,CAAC,cAAc,CAAC,CAAC,GAAGA,KAAK,CAAC,cAAc,CAAC,GAAG,QAAQ;EACpG,OAAO,EAAE,CAACO,MAAM,CAACP,KAAK,CAAC,YAAY,CAAC,EAAE,GAAG,CAAC,CAACO,MAAM,CAACF,WAAW,EAAE,GAAG,CAAC,CAACE,MAAM,CAACP,KAAK,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,CAACO,MAAM,CAACP,KAAK,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,CAACO,MAAM,CAACP,KAAK,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,CAACO,MAAM,CAACP,KAAK,CAAC,aAAa,CAAC,CAAC;AACxM;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,WAAW,CAACC,IAAI,EAAEN,IAAI,EAAE;EACtC,IAAIO,MAAM,GAAGF,WAAW,CAACE,MAAM,KAAKF,WAAW,CAACE,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAAC;EAC1F,IAAIC,OAAO,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEvC,IAAI,CAACD,OAAO,EAAE;IACZ,OAAO,IAAI;EACb;EAEAA,OAAO,CAACV,IAAI,GAAGA,IAAI;EAEnB,IAAIY,oBAAoB,GAAGF,OAAO,CAACL,WAAW,CAACC,IAAI,CAAC;IAChDO,KAAK,GAAGD,oBAAoB,CAACC,KAAK;EAEtC,OAAOC,IAAI,CAACC,IAAI,CAACF,KAAK,CAAC;AACzB;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,gBAAgB,CAACpB,OAAO,EAAE;EACxC,IAAI,OAAOE,MAAM,KAAK,WAAW,IAAI,CAACF,OAAO,EAAE;IAC7C,OAAO,IAAI;EACb;EAEA,IAAII,IAAI,GAAGL,gBAAgB,CAACC,OAAO,CAAC;EACpC,IAAIU,IAAI,GAAGV,OAAO,CAACqB,KAAK,IAAIrB,OAAO,CAACsB,WAAW;EAC/C,IAAIL,KAAK,GAAGR,WAAW,CAACC,IAAI,EAAEN,IAAI,CAAC;EAEnC,IAAIa,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,IAAI;EACb;EAEAjB,OAAO,CAACC,KAAK,CAACgB,KAAK,GAAG,EAAE,CAACT,MAAM,CAACS,KAAK,EAAE,IAAI,CAAC;EAC5C,OAAOA,KAAK;AACd;AACA,eAAeG,gBAAgB"},"metadata":{},"sourceType":"module"}